#! /bin/bash

appname=serf
log_level=info

. /etc/.docker_functions

chown serf ${log_dir} 2>/dev/null

# by default, we only listen to localhost unless told otherwise
#
rpc_port=${SERF_RPC_PORT:-7373}
rpc_ip=${SERF_RPC_IP:-127.0.0.1}

# by default we bind to all interfaces unless told otherwise
#
bind_port=${SERF_BIND_PORT:-7946}
bind_ip=${SERF_BIND_IP:-0.0.0.0}

# Figure out the Docker_Host Port NAT if SERF_ADVERTISE_PORT not specified
# otherwise use the SERF_ADVERTISE_PORT value or the bind_port
#
advertise_port=${SERF_ADVERTISE_PORT:-${bind_port}}
if [ -z "${SERF_ADVERTISE_PORT}" ]; then
  answer=$(get_docker_nat_port ${bind_port})
  advertise_port=${answer:-${advertise_port}}
fi

# Use Docker_host answer if SERF_ADVERTISE_IP not specified
# otherwise use the SERF_ADVERTISE_IP value or the host_ip
#
advertise_ip=${SERF_ADVERTISE_IP:-$(get_docker_host_ip)}
if [ -z "${SERF_ADVERTISE_IP}" ]; then
  answer=$(get_docker_nat_port_bind ${bind_port})
  advertise_ip=${answer:-${advertise_ip}}
fi

# If PORT_SCAN is enabled, use nmap to find our peers within our network
# keep expanding the netmask till we find a peer that might want to talk to us
# netmask cannot be smaller than 16
#
if [ -n "${PORT_SCAN}" ]; then
  for answer in $( port_scan_network ${bind_port} ${PORT_SCAN_MASK} ); do
    join_list="${join_list} -join=${answer}" 
  done
fi

# If a JOIN_LIST was specified then add those nodes to the agent run command
# Use nmap to see if its accepting connections, because if you attempt to join
# a non-responding node, it causes issues
#
if [ -n "${SERF_JOIN_LIST}" ]; then
  for local joiner in $(echo ${SERF_JOIN_LIST} | tr ',' ' '); do
    local joiner_ip=$(echo ${joiner}: | cut -d: -f1)
    local joiner_port=$(echo ${joiner}: | cut -d: -f2)

    for answer in $( port_scan_network ${joiner_port} 32 ${joiner_ip}); do
      join_list="${join_list} -join=${answer}" 
    done
  done
fi

# If the advertise port is not the same as the bind port then assume we are a child
# and add the parent context to our join list if its running
#
if [ "${advertise_port}" != "${bind_port}" ]; then
  local answer=$( port_scan_network ${bind_port} 32 $(get_docker_host_ip) )
	[ -n "${answer}" ] && join_list="${join_list} -join=${answer}"
fi

exec /sbin/setuser serf \
  /usr/bin/serf agent \
  ${join_list} \
  -node="${node_name}" \
  -rpc-addr="${rpc_ip}:${rpc_port}" \
  -bind="${bind_ip}:${bind_port}" \
  -advertise="${advertise_ip}:${advertise_port}" \
  -event-handler=/etc/service/serf/dispatcher.sh \
  -snapshot=${log_dir}/snapshot.dat \
  -tags-file=${log_dir}/tags.dat \
  -log-level=${log_level} \
  >>${log_dir}/serf.log 2>&1

